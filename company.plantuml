@startuml

title __COMPANY's Class Diagram__\n

  namespace com.company {
    class com.company.City {
        {static} + nextCityCode : int
        ~ code : int
        ~ name : String
        + City()
        + toString()
    }
  }
  

  namespace com.company {
    class com.company.FileManager {
        {static} + CITIES_FILE : String
        {static} + PASSENGERS_FILE : String
        {static} + ROUTES_FILE : String
        {static} + STATIC_FILE : String
        {static} + loadCitySerialized()
        {static} + loadPassengersSerialized()
        {static} + loadRouteSerialized()
        {static} + loadStaticsSerialized()
        {static} + saveAll()
        {static} + saveCitySerialized()
        {static} + savePassengersSerialized()
        {static} + saveRouteSerialized()
        {static} + saveStaticsSerialized()
    }
  }
  

  namespace com.company {
    class com.company.FlightRoutesList {
        + FlightRoutesList()
        + addPassengerToFlights()
        + addRoute()
        + count()
        + display()
        + getRoutes()
        + isEmpty()
        + printSeats()
        + removePassengerFromFlights()
        + verifyRoute()
        - insertLast()
    }
  }
  

  namespace com.company {
    class com.company.FlightsList {
        - count : int
        + FlightsList()
        + addFlight()
        + display()
        + getCount()
        + isEmpty()
        - insertLast()
    }
  }
  

  namespace com.company {
    class com.company.Main {
        {static} + bookingPanel()
        {static} + flightPanel()
        {static} + main()
        {static} + passengerPanel()
        {static} + primaryScreen()
        {static} + title()
        {static} + userInput()
    }
  }
  

  namespace com.company {
    class com.company.NodeFlight {
        + flightId : int
        {static} + nextFlightId : int
        + seats : NodePassenger[]
        + NodeFlight()
        + display()
        + getVacantSeats()
    }
  }
  

  namespace com.company {
    class com.company.NodeFlightRoute {
        + date : String
        {static} + nextRouteId : int
        ~ routeId : int
        + NodeFlightRoute()
        + display()
        + getCities()
        + getDate()
        + getFlights()
        + getRouteId()
    }
  }
  

  namespace com.company {
    class com.company.NodePassenger {
        {static} + nextPassengerId : int
        + passNum : String
        + passengerId : int
        + passengerName : String
        + NodePassenger()
        + display()
        + getPassengerId()
        + toString()
    }
  }
  

  namespace com.company {
    class com.company.PassengerList {
        + addPassenger()
        + count()
        + deleteFromPosition()
        + displayAllPassengers()
        + displayPassenger()
        + findPassenger()
        + isEmpty()
        + listLength()
        + searchDuplicationPassport()
    }
  }
  

  namespace com.company {
    class com.company.StaticUtils {
        + nextCityCode : int
        + nextFlightId : int
        + nextPassengerId : int
        + nextRouteId : int
        + StaticUtils()
        + StaticUtils()
        + loadClasses()
        + loadFromClasses()
    }
  }
  

  com.company.City .up.|> java.io.Serializable
  com.company.FlightRoutesList .up.|> java.io.Serializable
  com.company.FlightRoutesList o-- com.company.NodeFlightRoute : head
  com.company.FlightsList .up.|> java.io.Serializable
  com.company.FlightsList o-- com.company.NodeFlight : head
  com.company.NodeFlight .up.|> java.io.Serializable
  com.company.NodeFlight o-- com.company.City : destination
  com.company.NodeFlight o-- com.company.NodeFlight : next
  com.company.NodeFlight o-- com.company.City : source
  com.company.NodeFlightRoute .up.|> java.io.Serializable
  com.company.NodeFlightRoute o-- com.company.NodeFlightRoute : next
  com.company.NodeFlightRoute o-- com.company.FlightsList : flights
  com.company.NodePassenger .up.|> java.io.Serializable
  com.company.NodePassenger o-- com.company.NodePassenger : next
  com.company.PassengerList .up.|> java.io.Serializable
  com.company.PassengerList o-- com.company.NodePassenger : head
  com.company.StaticUtils .up.|> java.io.Serializable


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
